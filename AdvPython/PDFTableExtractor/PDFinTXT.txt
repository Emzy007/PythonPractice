Class 
& 
Objects 
9:47 
AM 
Wednesday, 
March 
6, 
2024 
print(MyClass.x) 
class 
MyClass: pl=Mylass() 
X=10 
Class 
definition 
print(p1.x) 
Constructors:init_0 
"init_0function: 
o 
All 
classes 
have 
a 
function 
calledinit), 
which 
is 
always 
executed 
when 
the 
class 
is 
being 
initiated.
o 
o 
The 
str 
(0 
function 
controls 
what 
should 
be 
returned 
0 
If 
the_str0function 
is 
not 
set, 
the 
string 
representation 
of 
the 
object 
is 
returned 
" 
The 
self 
Parameter: 
o 
The 
self 
parameter 
is 
a 
reference 
to 
the 
current 
instance 
of 
the 
class, 
and 
is 
used 
to 
access 
variables 
that 
belongs 
to 
the 
class.
oIt 
does 
not 
have 
to 
be 
named 
self, 
you 
can 
call 
it 
whatever 
you 
like, 
but 
it 
has 
to 
be 
the 
first 
parameter 
of 
amy 
function 
in 
the 
class: 
The 
pass 
Statement: 
o 
class 
definitions 
cannot 
be 
empty, 
but 
if 
you 
for 
some 
reason 
have 
a 
class 
definition 
with 
no 
content, 
put 
in 
the 
pass 
statement 
to 
avoid 
getting 
error.
o 
class 
Person: 
pass 
" 
Python 
Inheritance:Parent 
class 
alsO 
called 
base 
cla 
ss, 
Child 
class 
also 
called 
derived 
cla 
ss.
o 
Syntax 
for 
inheritance: 
dass 
Child( 
Parent) 
: 
<body 
of 
the 
child 
class> 
init_(0 
" 
When 
you 
add 
the 
0function 
o 
The 
child's 
init 
()function 
o 
To 
keep 
the 
inheritance 
of 
the 
parent's 
init_) 
function, 
add 
a 
call 
to 
the 
parent'sinit) 
function 
" 
Use 
the 
super() 
Function: 
o 
Python 
also 
has 
a 
super() 
function 
that 
will 
make 
the 
child 
class 
inherit 
all 
the 
methods 
and 
pr 
o 
pe 
rties 
from 
its 
parent 
" 
f 
you 
add 
a 
methodin 
the 
child 
claSS 
with 
the 
same 
name 
as 
a 
function 
in 
the 
parent 
class, 
the 
inheritance 
of 
the 
parent 
method 
will 
be 
overridden.
self: 
Self 
is 
a 
convention 
and 
not 
a 
Python 
keyword.
Selfis 
a 
parameter 
in 
Instance 
Method 
a 
nd 
the 
user 
can 
use 
another 
parameter 
name 
in 
place 
of 
But 
it 
is 
advisable 
to 
use 
self 
beca 
use 
it 
increases 
the 
readability 
of 
code, 
and 
it 
is 
also 
a 
good 
programming 
practice. 
"
Destructor 
isa 
special 
method 
which 
will 
be 
ivoked 
automatically 
when 
the 
object 
gets 
removed 
from 
the 
memory.
o 
definit_(self,price, 
brand): 
self.price=price 
self.brand=brand 
defdel_(self): 
print('Deleting 
the 
object') 
p2=Product(7000,Samsung') 
pl=Product(10000,'Apple') 
del 
p1 
Method 
Function 
Is 
part 
of 
an 
object 
and 
represents 
the 
behavior 
of 
the 
object 
Is 
e 
block 
of 
code 
witha 
name 
Can 
be 
invoked 
only 
on 
an 
object, 
using 
dot 
operator.
Without 
an 
object 
we 
It 
can 
be 
invoked 
using 
the 
name 
of 
the 
function 
and 
passing 
parameters 
Example: 
(1,2,3].reverse() 
Exampie: 
len([ 
A 
method 
must 
have 
at 
least 
one 
parameter 
: 
self 
Parameters 
are 
optional 
in 
a 
function 
Method 
invocation: 
Inbound 
& 
Outbound 
class 
Mobile: 
def_init_(self): 
print("Inside 
constructor") 
def 
purchase 
(self): 
print("Purchasing 
a 
mobile") 
mobl=Mobile() 
mobl.purchase
#inbound 
method 
invocation, 
We 
need 
not 
pass 
the 
value 
for 
self.
Mobile.purc
#Outbound
method 
invocation
We 
have 
to 
pass 
the 
object 
as 
the 
value 
of 
self.
The_init_() 
function 
is 
called 
a 
utomatical 
ly 
every 
time 
the 
class 
is 
being 
used 
to 
create 
a 
new 
object.
The__str() 
Function: 
when 
the 
class 
object 
is 
represented 
as 
a 
string.
function, 
the 
child 
class 
will 
no 
longer 
inherit 
thArent'sinit_() 
function.
overrides 
the 
inheritance 
of 
the 
parent's 
init 
class 
Product: 
cannot 
invoke 
a 
method 
1,2,3])
Example 
Syntax 
ACcessitble 
another 
inslde 
Accessible 
inside 
method 
Accessible 
inside 
class 
Accessible 
class 
Define 
and 
outside 
Initialire 
in 
Variable 
irst 
name 
Varlable 
name 
Yes 
fes 
Yes 
Outside 
Class 
For 
Class 
For 
Method 
sell.first 
_name 
irst_name 
Varlable 
namae 
For 
Method 
-
For 
Class 
-
Clas 
No 
NG 
Insoe 
Class 
Instance.variable 
nama 
first_name 
Variable 
name 
No 
Yes 
No 
No 
rslde 
dass 
variables: 
Such 
varia 
bles 
which 
are 
created 
at 
a 
class 
level 
are 
called 
class 
variables.
o 
ClasS 
variables 
belong 
to 
the 
cla 
ss 
a 
nd 
hence 
it 
is 
incorrect 
to 
update 
them 
using 
the 
object 
reference 
variable 
or 
self.
Doing 
so 
may 
ca 
use 
unexpected 
o 
Class class 
Mobile: 
discount 
= 
50 
#CIass 
variable 
definit_(self, 
price, 
brand): 
self.price 
= 
price 
self.brand 
= 
brand 
#Class 
variables 
can 
be 
private 
and 
class 
Mobile: 
discount=50 
def 
get_discount(self): 
return 
Mobile._discount 
def 
set_discount(self,discount): 
discount 
= 
discount 
print(m1.get_discount()) 
ml=Mobile() 
Mobile. 
"
reating 
classmethod 
o 
a 
class 
variable 
is 
independent 
of 
the 
object, 
a 
way 
is 
needed 
to 
access 
the 
gett 
er/setter 
methods 
without 
an 
object.
Class 
methods 
can 
be 
accessed 
without 
an 
object 
o 
the 
first 
argument 
to 
a 
class 
method 
is 
the 
reference 
of 
the 
class 
itself 
called 
cls.
o 
.
Definitions 
of 
The 
methods 
should 
not 
have 
self.
Instead, 
they 
should 
have 
the 
class 
def 
get_discount(cls): 
return 
cls.
discount 
@classmethod 
def 
set_discount(cls, 
discount): 
cls.
discount=discount 
Static 
methods 
o 
in 
a 
class, 
a 
method 
may 
be 
o 
Usually 
generic 
utility 
functions 
defined 
within 
the 
scope 
of 
a 
class.
o 
static 
o 
.
Definitions 
of 
these 
methods 
should 
be 
The 
methods 
@staticmethod 
def 
calculate_tax(cust_type): 
ifcust_type=='member'): 
return 
0.10 
else: 
return 
0.20 
" 
Following 
is 
the 
complete 
solution 
using 
static 
methods, 
class 
methods 
and 
instance 
methods.
class 
Mobile: 
discount 
= 
50 
definit(self, 
price, 
brand): 
self.price 
= 
price 
self.brand 
brand 
def 
purchase(sel
consequences 
in 
the 
code 
and 
should 
be 
refrained 
from.
variables 
can 
be 
made 
as 
private 
by 
adding 
a 
double 
underscore 
in 
front 
of 
it 
and 
create 
getter 
and 
setter 
methods 
to 
a 
ccess 
or 
modify 
it.
o 
Read 
more 
here 
accessed 
by 
using 
getters 
and 
setters.
There 
are 
two 
rules 
in 
creating 
such 
class 
methods: 
these 
methods 
should 
be 
prefixed 
with 
@classmethod 
reference 
cls 
as 
the 
first 
argument 
to 
the 
class 
method 
@classmethod 
defined 
that 
neither 
accesses 
the 
class 
attributes 
nor 
the 
instance 
attributes.
methods 
do 
not 
need 
an 
object 
to 
invoke 
them.
They 
are 
accessed 
using 
the 
class 
name.
There 
are 
twO 
rules 
in 
creating 
such 
static 
methods: 
prefixed 
with 
@staticmethod 
should 
neither 
have 
self 
nor 
cls 
as 
the 
first 
argument.
Instead, 
they 
can 
have 
zero 
or 
more 
arguments 
just 
like 
any 
other 
Python 
function
print 
(se.brand, 
total 
= 
self.pr 
ice 
-
self.price 
* 
def 
enable 
_discount(cis): 
cls.set_discount(50) 
@classmethod 
def 
disable_discount(cls): 
cls.set_discount(0) 
@classmethod 
def 
get_discount(cls): 
return 
cls._ 
discount 
@classmethod 
def 
set_discount(cls, 
discount): 
cls._discount 
= 
discount 
@staticmethod 
def 
calculate_tax(cust_type): 
if(cust_type=='member'): 
return 
10 
else: 
return 
20 
print(Tax 
percent 
to 
be 
paid 
by 
members:, 
Mobile.calculate_tax('member') 
non-members:Mobile.calculate_tax('non-member') 
print(Tax 
percent 
to 
be 
paid 
by 
mob3=Mobile(5000, 
"Samsung") 
mobl=Mobile(20000, 
"Apple") 
mob2=Mobile(30000, 
"Apple") 
Mobile.disable_discount() 
mobl.purchase) 
Mobile.enable 
discount() 
mob2.purchase() 
Static 
Method 
Class 
Method 
A-tod 
Is 
pr=fx=d 
with 
@statcretod 
2 
Frst 
ume 
s 
mandatoy 
Cn 
s 
cis 
by 
Cetau 
ioloved 
Dy 
zero 
or 
mreAGuments 
are 
optronal 
That 
is.
z0f3 
cr 
more 
sguments 
can 
be 
erts 
cissrrethce 
1 
Wed 
ts 
efet 
*th 
passe 
Do-s 
ecss 
class 
Ct 
irstarce 
atttates 
ttn 
teT 
3 
Accesses 
ciass 
ancotmodty 
State 
o 
the 
ciasS 
4 
Car 
modty 
state 
gf 
rgri 
Used 
a5 
a 
0=ric 
itilty 
functn 
"mobile 
with 
price", 
self.price, 
"is 
available 
after 
discount 
at", 
total) 
@classmethod 
Mobile._discount/ 
100
